Directory structure:
└── jpegli-windows-gui/
    ├── README.md
    ├── convert_with_jpegli.ps1
    ├── go.mod
    ├── go.sum
    ├── main.go
    ├── convert/
    └── install/
        ├── install.go
        └── files/
            ├── exiftool-13.27_64.zip
            └── jpegli-x64-windows-static.zip

================================================
File: README.md
================================================
# JPEG Optimizer for Windows with jpegli

This is a Windows WPF desktop application designed to optimize JPEG image files using the jpegli optimizer.

## About jpegli

> **WARNING:** jpegli is an experimental technology and is NOT production ready. Everything you do with this tool is at your own risk!

jpegli is a new JPEG coding library developed by Google Research that maintains high backward compatibility while offering enhanced capabilities and a 35% compression ratio improvement at high quality compression settings.

Key features of jpegli include:
- Full interoperability with the original JPEG standard
- Higher quality results with fewer artifacts
- Comparable coding speed to traditional approaches like libjpeg-turbo and MozJPEG
- Support for 10+ bits per component (while maintaining compatibility with 8-bit viewers)
- More efficient compression than traditional JPEG codecs

For more information, see: [Introducing Jpegli: A New JPEG Coding Library](https://opensource.googleblog.com/2024/04/introducing-jpegli-new-jpeg-coding-library.html)

## Purpose

The application provides a simple graphical user interface where users can drag and drop JPEG files or folders to optimize them using the jpegli optimizer, while preserving image metadata through exiftool.

## Key Features

1. **Drag and Drop Interface**
   - Users can drag and drop individual JPEG files or entire folders
   - The app automatically scans folders recursively for all JPEG files

2. **Optimization Settings**
   - **Distance (Quality)**: A slider control that adjusts the optimization level from 0.0 to 3.0 (default: 1.0)
     - Higher values produce smaller files but potentially lower quality
   - **Overwrite Files**: Toggle option to either overwrite original files or save optimized versions with a ".jpegli.jpg" extension

3. **Processing Capabilities**
   - Processes images asynchronously to keep the UI responsive
   - Uses jpegli.exe for image optimization
   - Uses exiftool.exe to preserve metadata from the original images
   - Displays real-time progress and statistics

4. **Feedback & Progress Tracking**
   - Log area showing detailed processing information for each file
   - Status bar displaying overall progress
   - File size savings calculation (both in bytes and percentage)

## Technical Implementation

- Built using .NET (targeting net9.0-windows)
- WPF (Windows Presentation Foundation) UI framework
- Asynchronous processing using Tasks
- External tool integration (jpegli and exiftool)
- File system operations for managing optimized files

## Example Workflow

Here's a practical example of how to use this tool in a photography workflow:

1. Export images from Lightroom or Capture One with JPEG 100% Quality
2. Move these files or the entire folder to this application
3. Process them with the recommended quality setting of 0.5 (distance)
   - Distance of 0.5 is for the highest quality
   - Distance of 1.0 is considered visually lossless
   - Recommended range: 0.5 to 3.0
   - Allowed range: 0.0 to 25.0
   - Lower values maintain higher quality while still achieving good compression

In a real-world example, processing 35 files (45 MP each) with a distance setting of 0.5 reduced the total size from 918.09 MB to 273.85 MB - achieving a compression ratio of 0.3 (70% size reduction) while maintaining visual quality.

## Usage Flow

1. User adjusts optimization settings (distance slider and overwrite option)
2. User drags and drops JPEG files or folders onto the application
3. The application processes each image with the selected settings
4. Progress and results are displayed in real-time
5. Optimized files are saved according to user preferences

## Dependencies

The application requires:
- jpegli.exe - The core optimization engine
- exiftool.exe - For preserving image metadata

These tools should be placed in a "tools" folder in the application's directory.

For those who prefer command-line operations, the included PowerShell script `convert_with_jpegli.ps1` demonstrates how to perform the same optimization using a script with these executables directly.

The project is compiled and ready to run, with the executable available at bin/Debug/net9.0-windows/jpegli-windows-gui.exe.

================================================
File: convert_with_jpegli.ps1
================================================
<#
.SYNOPSIS
    Converts JPEG images using the JPEGLI encoder and preserves metadata.

.DESCRIPTION
    This script processes JPEG images from a source directory, converts them using the JPEGLI encoder
    with specified quality settings, and copies the original metadata to the converted images.
    It also provides size comparison between original and converted files.

.PARAMETER source
    The source directory containing original JPEG images.

.PARAMETER target
    The target directory where converted images will be saved.

.PARAMETER skipIfExists
    If true, skips conversion if the target file already exists.

.NOTES
    Requires:
    - ExifTool (https://exiftool.org/)
    - JPEGLI (https://github.com/google/jpegli)

.EXAMPLE
    .\convert_with_jpegli.ps1
#>

# Check for required executables

# Download from https://exiftool.org/ (need to rename to exiftool.exe, because this changes bahavior)
$exifToolPath = "C:\tools\exiftool-13.26_64\exiftool.exe"
if (-not (Test-Path $exifToolPath)) {
    Write-Error "ExifTool not found at $exifToolPath"
    exit 1
}

# Download from this Githunb Action https://github.com/google/jpegli/actions/workflows/release.yaml to main branch
$cjpegliPath = "C:\tools\jpegli\bin\cjpegli.exe"
if (-not (Test-Path $cjpegliPath)) {
    Write-Error "cjpegli.exe not found at $cjpegliPath"
    exit 1
}

# Define source and target directories
$source = "H:\media\development\2025-04-19\Export"
$target = "H:\media\development\2025-04-19\Export_jpegli"

# skip if target file already exists
$skipIfExists = $true

# Create target folder if it doesn't exist
if (-not (Test-Path $target)) {
    New-Item -ItemType Directory -Path $target | Out-Null
}

# Process the first file from the source folder
# Get-ChildItem $source | Select -First 1 | ForEach-Object {
Get-ChildItem $source -Filter *.jpg | ForEach-Object {
    $sourceFile = $_.FullName
    $targetFile = Join-Path $target $_.Name

    if ($skipIfExists -and (Test-Path $targetFile)) {
        Write-Host "Skipping $targetFile as it already exists."
        return
    }

    # Convert image with cjpegli.exe using -d 1.0 option (1.0 = visually lossless (default)
    & $cjpegliPath $sourceFile $targetFile -d 0.5

    # Copy metadata from source to target using ExifTool
    & $exifToolPath -overwrite_original -TagsFromFile $sourceFile $targetFile

    # Retrieve file sizes
    $s_size = (Get-Item $sourceFile).Length
    $t_size = (Get-Item $targetFile).Length

    # Calculate and display the size ratio
    $ratio = $t_size / $s_size
    Write-Host "Source: $sourceFile ($s_size bytes)"
    Write-Host "Target: $targetFile ($t_size bytes)"
    Write-Host "Size ratio: $([math]::Round($ratio,2))"
}

# Compare the file sizes of the source and target files
$sourceFiles = @(); $sourceFiles += Get-ChildItem $source -Filter *.jpg
$targetFiles = @(); $targetFiles += Get-ChildItem $target -Filter *.jpg
$allFilesGroup = $sourceFiles + $targetFiles | Group-Object -Property Name 
$allFilesGroup = $allFilesGroup | ?{ $_.Count -eq 2 }

# Number of files on both sides
Write-Host "Number of files on both sides: $($allFilesGroup.Count / 2)"

$sum_source = 0
$sum_target = 0

$allFilesGroup | ForEach-Object {
    $sourceFile = $_.Group[0]
    $targetFile = $_.Group[1]

    $s_size = $sourceFile.Length
    $t_size = $targetFile.Length

    $sum_source += $s_size
    $sum_target += $t_size

    # Calculate and display the size ratio
    $ratio = $t_size / $s_size
    Write-Host ("{0} from {1:N2} MB to {2:N2} MB, ratio: {3}" -f ($sourceFile.Name), ($s_size/1mb), ($t_size/1mb), ([math]::Round($ratio,2)))
    # Write-Host "File: $sourceFile ($s_size bytes)"
    # Write-Host "Target: $targetFile ($t_size bytes)"
    # Write-Host "Size ratio: $([math]::Round($ratio,2))"
}

Write-Host ("Total size: {0:N2} MB to {1:N2} MB, ratio: {2}" -f ($sum_source/1mb), ($sum_target/1mb), ([math]::Round($sum_target/$sum_source,2)))

# Format-Table -InputObject $allFiles -Property FullName, Length -AutoSize




================================================
File: go.mod
================================================
module github.com/dhcgn/jpegli-windows-explorer-extention

go 1.23.4

require (
	github.com/pterm/pterm v0.12.80
	golang.org/x/sys v0.32.0
)

require (
	atomicgo.dev/cursor v0.2.0 // indirect
	atomicgo.dev/keyboard v0.2.9 // indirect
	atomicgo.dev/schedule v0.1.0 // indirect
	github.com/containerd/console v1.0.3 // indirect
	github.com/gookit/color v1.5.4 // indirect
	github.com/lithammer/fuzzysearch v1.1.8 // indirect
	github.com/mattn/go-runewidth v0.0.16 // indirect
	github.com/rivo/uniseg v0.4.4 // indirect
	github.com/xo/terminfo v0.0.0-20220910002029-abceb7e1c41e // indirect
	golang.org/x/term v0.26.0 // indirect
	golang.org/x/text v0.20.0 // indirect
)


================================================
File: go.sum
================================================
atomicgo.dev/cursor v0.2.0 h1:H6XN5alUJ52FZZUkI7AlJbUc1aW38GWZalpYRPpoPOw=
atomicgo.dev/cursor v0.2.0/go.mod h1:Lr4ZJB3U7DfPPOkbH7/6TOtJ4vFGHlgj1nc+n900IpU=
atomicgo.dev/keyboard v0.2.9 h1:tOsIid3nlPLZ3lwgG8KZMp/SFmr7P0ssEN5JUsm78K8=
atomicgo.dev/keyboard v0.2.9/go.mod h1:BC4w9g00XkxH/f1HXhW2sXmJFOCWbKn9xrOunSFtExQ=
atomicgo.dev/schedule v0.1.0 h1:nTthAbhZS5YZmgYbb2+DH8uQIZcTlIrd4eYr3UQxEjs=
atomicgo.dev/schedule v0.1.0/go.mod h1:xeUa3oAkiuHYh8bKiQBRojqAMq3PXXbJujjb0hw8pEU=
github.com/MarvinJWendt/testza v0.1.0/go.mod h1:7AxNvlfeHP7Z/hDQ5JtE3OKYT3XFUeLCDE2DQninSqs=
github.com/MarvinJWendt/testza v0.2.1/go.mod h1:God7bhG8n6uQxwdScay+gjm9/LnO4D3kkcZX4hv9Rp8=
github.com/MarvinJWendt/testza v0.2.8/go.mod h1:nwIcjmr0Zz+Rcwfh3/4UhBp7ePKVhuBExvZqnKYWlII=
github.com/MarvinJWendt/testza v0.2.10/go.mod h1:pd+VWsoGUiFtq+hRKSU1Bktnn+DMCSrDrXDpX2bG66k=
github.com/MarvinJWendt/testza v0.2.12/go.mod h1:JOIegYyV7rX+7VZ9r77L/eH6CfJHHzXjB69adAhzZkI=
github.com/MarvinJWendt/testza v0.3.0/go.mod h1:eFcL4I0idjtIx8P9C6KkAuLgATNKpX4/2oUqKc6bF2c=
github.com/MarvinJWendt/testza v0.4.2/go.mod h1:mSdhXiKH8sg/gQehJ63bINcCKp7RtYewEjXsvsVUPbE=
github.com/atomicgo/cursor v0.0.1/go.mod h1:cBON2QmmrysudxNBFthvMtN32r3jxVRIvzkUiF/RuIk=
github.com/containerd/console v1.0.3 h1:lIr7SlA5PxZyMV30bDW0MGbiOPXwc63yRuCP0ARubLw=
github.com/containerd/console v1.0.3/go.mod h1:7LqA/THxQ86k76b8c/EMSiaJ3h1eZkMkXar0TQ1gf3U=
github.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
github.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
github.com/gookit/color v1.4.2/go.mod h1:fqRyamkC1W8uxl+lxCQxOT09l/vYfZ+QeiX3rKQHCoQ=
github.com/gookit/color v1.5.0/go.mod h1:43aQb+Zerm/BWh2GnrgOQm7ffz7tvQXEKV6BFMl7wAo=
github.com/gookit/color v1.5.4 h1:FZmqs7XOyGgCAxmWyPslpiok1k05wmY3SJTytgvYFs0=
github.com/gookit/color v1.5.4/go.mod h1:pZJOeOS8DM43rXbp4AZo1n9zCU2qjpcRko0b6/QJi9w=
github.com/klauspost/cpuid/v2 v2.0.9/go.mod h1:FInQzS24/EEf25PyTYn52gqo7WaD8xa0213Md/qVLRg=
github.com/klauspost/cpuid/v2 v2.0.10/go.mod h1:g2LTdtYhdyuGPqyWyv7qRAmj1WBqxuObKfj5c0PQa7c=
github.com/klauspost/cpuid/v2 v2.0.12/go.mod h1:g2LTdtYhdyuGPqyWyv7qRAmj1WBqxuObKfj5c0PQa7c=
github.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=
github.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=
github.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=
github.com/lithammer/fuzzysearch v1.1.8 h1:/HIuJnjHuXS8bKaiTMeeDlW2/AyIWk2brx1V8LFgLN4=
github.com/lithammer/fuzzysearch v1.1.8/go.mod h1:IdqeyBClc3FFqSzYq/MXESsS4S0FsZ5ajtkr5xPLts4=
github.com/mattn/go-runewidth v0.0.13/go.mod h1:Jdepj2loyihRzMpdS35Xk/zdY8IAYHsh153qUoGf23w=
github.com/mattn/go-runewidth v0.0.16 h1:E5ScNMtiwvlvB5paMFdw9p4kSQzbXFikJ5SQO6TULQc=
github.com/mattn/go-runewidth v0.0.16/go.mod h1:Jdepj2loyihRzMpdS35Xk/zdY8IAYHsh153qUoGf23w=
github.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=
github.com/pterm/pterm v0.12.27/go.mod h1:PhQ89w4i95rhgE+xedAoqous6K9X+r6aSOI2eFF7DZI=
github.com/pterm/pterm v0.12.29/go.mod h1:WI3qxgvoQFFGKGjGnJR849gU0TsEOvKn5Q8LlY1U7lg=
github.com/pterm/pterm v0.12.30/go.mod h1:MOqLIyMOgmTDz9yorcYbcw+HsgoZo3BQfg2wtl3HEFE=
github.com/pterm/pterm v0.12.31/go.mod h1:32ZAWZVXD7ZfG0s8qqHXePte42kdz8ECtRyEejaWgXU=
github.com/pterm/pterm v0.12.33/go.mod h1:x+h2uL+n7CP/rel9+bImHD5lF3nM9vJj80k9ybiiTTE=
github.com/pterm/pterm v0.12.36/go.mod h1:NjiL09hFhT/vWjQHSj1athJpx6H8cjpHXNAK5bUw8T8=
github.com/pterm/pterm v0.12.40/go.mod h1:ffwPLwlbXxP+rxT0GsgDTzS3y3rmpAO1NMjUkGTYf8s=
github.com/pterm/pterm v0.12.80 h1:mM55B+GnKUnLMUSqhdINe4s6tOuVQIetQ3my8JGyAIg=
github.com/pterm/pterm v0.12.80/go.mod h1:c6DeF9bSnOSeFPZlfs4ZRAFcf5SCoTwvwQ5xaKGQlHo=
github.com/rivo/uniseg v0.2.0/go.mod h1:J6wj4VEh+S6ZtnVlnTBMWIodfgj8LQOQFoIToxlJtxc=
github.com/rivo/uniseg v0.4.4 h1:8TfxU8dW6PdqD27gjM8MVNuicgxIjxpm4K7x4jp8sis=
github.com/rivo/uniseg v0.4.4/go.mod h1:FN3SvrM+Zdj16jyLfmOkMNblXMcoc8DfTHruCPUcx88=
github.com/sergi/go-diff v1.2.0/go.mod h1:STckp+ISIX8hZLjrqAeVduY0gWCT9IjLuqbuNXdaHfM=
github.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=
github.com/stretchr/testify v1.4.0/go.mod h1:j7eGeouHqKxXV5pUuKE4zz7dFj8WfuZ+81PSLYec5m4=
github.com/stretchr/testify v1.6.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=
github.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=
github.com/xo/terminfo v0.0.0-20210125001918-ca9a967f8778/go.mod h1:2MuV+tbUrU1zIOPMxZ5EncGwgmMJsa+9ucAQZXxsObs=
github.com/xo/terminfo v0.0.0-20220910002029-abceb7e1c41e h1:JVG44RsyaB9T2KIHavMF/ppJZNG9ZpyihvCd0w101no=
github.com/xo/terminfo v0.0.0-20220910002029-abceb7e1c41e/go.mod h1:RbqR21r5mrJuqunuUZ/Dhy/avygyECGrLceyNeo4LiM=
github.com/yuin/goldmark v1.4.13/go.mod h1:6yULJ656Px+3vBD8DxQVa3kxgyrAnzto9xy5taEt/CY=
golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=
golang.org/x/crypto v0.0.0-20210921155107-089bfa567519/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=
golang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4/go.mod h1:jJ57K6gSWd91VN4djpZkiMVwK6gcyfeH4XE8wZrZaV4=
golang.org/x/mod v0.8.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=
golang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
golang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=
golang.org/x/net v0.0.0-20220722155237-a158d28d115b/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=
golang.org/x/net v0.6.0/go.mod h1:2Tu9+aMcznHK/AK1HMvgo6xiTLG5rD5rZLDS+rp2Bjs=
golang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
golang.org/x/sync v0.0.0-20220722155255-886fb9371eb4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
golang.org/x/sync v0.1.0/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
golang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
golang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
golang.org/x/sys v0.0.0-20210124154548-22da62e12c0c/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
golang.org/x/sys v0.0.0-20210330210617-4fbd30eecc44/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
golang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
golang.org/x/sys v0.0.0-20211013075003-97ac67df715c/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
golang.org/x/sys v0.0.0-20220319134239-a9b59b0215f8/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
golang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
golang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
golang.org/x/sys v0.5.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
golang.org/x/sys v0.32.0 h1:s77OFDvIQeibCmezSnk/q6iAfkdiQaJi4VzroCFrN20=
golang.org/x/sys v0.32.0/go.mod h1:BJP2sWEmIv4KK5OTEluFJCKSidICx8ciO85XgH3Ak8k=
golang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=
golang.org/x/term v0.0.0-20210220032956-6a3ed077a48d/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=
golang.org/x/term v0.0.0-20210615171337-6886f2dfbf5b/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=
golang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=
golang.org/x/term v0.5.0/go.mod h1:jMB1sMXY+tzblOD4FWmEbocvup2/aLOaQEp7JmGp78k=
golang.org/x/term v0.26.0 h1:WEQa6V3Gja/BhNxg540hBip/kkaYtRg3cxg4oXSw4AU=
golang.org/x/term v0.26.0/go.mod h1:Si5m1o57C5nBNQo5z1iq+XDijt21BDBDp2bK0QI8e3E=
golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
golang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
golang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=
golang.org/x/text v0.7.0/go.mod h1:mrYo+phRRbMaCq/xk9113O4dZlRixOauAjOtrjsXDZ8=
golang.org/x/text v0.9.0/go.mod h1:e1OnstbJyHTd6l/uOt8jFFHp6TRDWZR/bV3emEE/zU8=
golang.org/x/text v0.20.0 h1:gK/Kv2otX8gz+wn7Rmb3vT96ZwuoxnQlY+HlJVj7Qug=
golang.org/x/text v0.20.0/go.mod h1:D4IsuqiFMhST5bX19pQ9ikHC2GsaKyk/oF+pn3ducp4=
golang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
golang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
golang.org/x/tools v0.1.12/go.mod h1:hNGJHUnrk76NpqgfD5Aqm5Crs+Hm0VOH/i9J2+nxYbc=
golang.org/x/tools v0.6.0/go.mod h1:Xwgl3UAJ/d3gWutnCtw505GrjyAbvKui8lOU390QaIU=
golang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
gopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
gopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
gopkg.in/yaml.v2 v2.2.4/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
gopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
gopkg.in/yaml.v3 v3.0.0-20210107192922-496545a6307b/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=


================================================
File: main.go
================================================
package main

import (
	"fmt"
	"os"

	"github.com/dhcgn/jpegli-windows-explorer-extention/install"
	"github.com/pterm/pterm"
)

func main() {
	// Print all args
	for i := 0; i < len(os.Args); i++ {
		fmt.Printf("arg %d: %s\n", i, os.Args[i])
	}

	if len(os.Args) == 1 {
		pterm.Println("No arguments provided. Want to install and set context menu?")
		result, _ := pterm.DefaultInteractiveConfirm.Show()
		pterm.Println()
		pterm.Info.Printfln("You answered: %s", boolToText(result))
		if result {
			install.Do()
		}
	}

	// Wait for the user to press any key,
	fmt.Println("Press any key to continue...")
	var input [1]byte
	os.Stdin.Read(input[:])
}

func boolToText(b bool) string {
	if b {
		return pterm.Green("Yes")
	}
	return pterm.Red("No")
}


================================================
File: install/install.go
================================================
package install

import (
	"embed"
	_ "embed"
	"fmt"
	"io"
	"os"
	"path/filepath"

	"golang.org/x/sys/windows/registry"
)

// Embedded zip files
var (
	//go:embed files/*
	files embed.FS
)

func Do() {
	// Copy Executable to the Program Data directory
	execPath := CopyExecutableToProgramData()
	if execPath == "" {
		fmt.Println("Failed to copy executable to Program Data directory")
		return
	}

	// Set the executable as Windows Explorer context menu
	SetExecutableAsWindowsExplorerContextMenu(execPath)
}

func getAppFolder() string {
	// Get the user cache directory
	cacheDir, err := os.UserCacheDir()
	if err != nil {
		fmt.Printf("Error getting user cache directory: %v\n", err)
		return ""
	}
	// Create the target directory if it doesn't exist
	targetDir := filepath.Join(cacheDir, "jpegli-windows-explorer-extention")
	return targetDir
}

func ExtractEmbeddedZipFilesToAppFolder() {

}

// CopyExecutableToProgramData moves the executable to the Program Data directory
// Folder: os.UserCacheDir() + jpegli-windows-explorer-extention
// Return the path to the executable in the Program Data directory
func CopyExecutableToProgramData() string {
	// Get the current executable path
	exePath, err := os.Executable()
	if err != nil {
		fmt.Printf("Error getting current executable path: %v\n", err)
		return ""
	}

	// Create the target directory if it doesn't exist
	targetDir := getAppFolder()
	err = os.MkdirAll(targetDir, 0755)
	if err != nil {
		fmt.Printf("Error creating directory %s: %v\n", targetDir, err)
		return ""
	}
	// Get the filename from the executable path
	_, fileName := filepath.Split(exePath)
	targetPath := filepath.Join(targetDir, fileName)

	// Always copy the executable to the target directory
	sourceFile, err := os.Open(exePath)
	if err != nil {
		fmt.Printf("Error opening source file %s: %v\n", exePath, err)
		return ""
	}
	defer sourceFile.Close()

	// Create the target file
	targetFile, err := os.Create(targetPath)
	if err != nil {
		fmt.Printf("Error creating target file %s: %v\n", targetPath, err)
		return ""
	}
	defer targetFile.Close()

	// Copy the contents
	_, err = io.Copy(targetFile, sourceFile)
	if err != nil {
		fmt.Printf("Error copying file: %v\n", err)
		return ""
	}

	fmt.Printf("Executable successfully copied to %s\n", targetPath)
	return targetPath
}

// SetExecutableAsWindowsExplorerContextMenu sets the executable as a Windows Explorer context menu item
// for Files and Folders.
func SetExecutableAsWindowsExplorerContextMenu(execPath string) {
	// Keep the path as is (don't convert to slashes) and properly escape it for the registry
	execCommand := "\"" + execPath + "\" \"%1\""
	// Registry keys to modify
	registryKeys := []struct {
		parent string
		path   string
		name   string
		value  string
	}{
		// For all files
		{`SOFTWARE\Classes\*\shell`, "JPEGLIOptimizer", "", "Optimize with JPEGLI"},
		{`SOFTWARE\Classes\*\shell\JPEGLIOptimizer`, "Icon", "", execPath},
		{`SOFTWARE\Classes\*\shell\JPEGLIOptimizer\command`, "", "", execCommand},

		// For folders
		{`SOFTWARE\Classes\Directory\shell`, "JPEGLIOptimizer", "", "Optimize JPEGs with JPEGLI"},
		{`SOFTWARE\Classes\Directory\shell\JPEGLIOptimizer`, "Icon", "", execPath},
		{`SOFTWARE\Classes\Directory\shell\JPEGLIOptimizer\command`, "", "", execCommand},
	}

	// Create or update registry entries
	for _, key := range registryKeys {
		// Try to open existing key first
		fullPath := key.parent + "\\" + key.path
		k, exists, err := registry.CreateKey(registry.CURRENT_USER, fullPath, registry.ALL_ACCESS)
		if err != nil {
			fmt.Printf("Error accessing registry key %s: %v\n", fullPath, err)
			continue
		}

		// Set or update the registry value
		if key.name == "" {
			// Default value
			err = k.SetStringValue("", key.value)
			if err != nil {
				fmt.Printf("Error setting default value for key %s: %v\n", fullPath, err)
			} else if exists {
				fmt.Printf("Updated existing registry key: %s\n", fullPath)
			} else {
				fmt.Printf("Created new registry key: %s\n", fullPath)
			}
		} else {
			// Named value
			err = k.SetStringValue(key.name, key.value)
			if err != nil {
				fmt.Printf("Error setting value '%s' for key %s: %v\n", key.name, fullPath, err)
			} else if exists {
				fmt.Printf("Updated existing registry value: %s\\%s\n", fullPath, key.name)
			} else {
				fmt.Printf("Created new registry value: %s\\%s\n", fullPath, key.name)
			}
		}

		k.Close()
	}

	fmt.Println("Successfully updated JPEGLI Optimizer in Windows Explorer context menu")
}


